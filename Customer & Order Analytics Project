--How many orders were placed in January? 
SELECT COUNT(orderID) AS "Jan orders"
FROM BIT_DB.JanSales
WHERE length(orderID) = 6;

--How many of those orders were for an iPhone?
SELECT COUNT(orderID) AS "Jan iPhone orders"
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length(orderID) = 6;

--Select the customer account numbers for all the orders that were placed in February.
--It's very important to use DISTINCT as the same customer/account number could have placed multiple orders
SELECT DISTINCT c.acctnum
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE length(c.order_id) = 6;

--Which product was the cheapest one sold in January, and what was the price?
--Method #1.0 (Most accurate as it does not limit the number of distinct products with the cheapest price)
--You can use IN instead of <=
SELECT Product, price
FROM BIT_DB.JanSales
WHERE price <= (SELECT MIN(price) FROM BIT_DB.JanSales WHERE length(orderID) = 6)
AND length(orderID) = 6
GROUP BY Product;
--Method #1.1 (Using DISTINCT instead of GROUP BY)
SELECT DISTINCT Product, price
FROM BIT_DB.JanSales
WHERE price IN (SELECT MIN(price) FROM BIT_DB.JanSales WHERE length(orderID) = 6)
AND length(orderID) = 6;
--Method #2 (Least accurate as you are assuming there is only 1 product with the cheapest price)
SELECT DISTINCT Product, price 
FROM BIT_DB.JanSales 
WHERE length(orderID) = 6
ORDER BY price LIMIT 1;
--Method #3 (Also very accurate)
/*In most RDBMS, the software will NOT allow you to select an aggregate function (like MIN(price)) along with a non-aggregate function (like Product)
unless you also have a GROUP BY clause at the end of the query.
This is because without the GROUP BY, the RDBMS doesn't know you're asking for the min(price) of all products, it thinks you're asking for the min(price) of each product.
Since our data doesn't have multiple prices for the same item, this isn't something we'd be interested in seeing. */
SELECT DISTINCT Product, MIN(price) 
FROM BIT_DB.JanSales 
WHERE length(orderID) = 6
GROUP BY product, price
ORDER BY price LIMIT 1;
--Method #3.1 (No need for DISTINCT when using GROUP BY)
SELECT Product, MIN(price) 
FROM BIT_DB.JanSales Jan 
GROUP BY product, price
ORDER BY price LIMIT 1;

/*What is the total revenue for each product sold in January?
(Revenue can be calculated using the quantity of products sold and the price of the products). */
SELECT Product, ROUND((SUM(Quantity)*price)) Revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
GROUP BY Product;

/*Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, 
and how many of each were sold, and what was the total revenue?*/
SELECT Product, SUM(Quantity) Qty, (SUM(Quantity)*price) Revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
AND length(orderID) = 6
GROUP BY Product;

/*How many customers ordered more than 2 products at a time in February,
and what was the average amount spent for those customers?*/
SELECT COUNT(distinct c.acctnum), AVG(Quantity*price) Avg
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE f.Quantity > 2
AND length(f.orderID) = 6;

--Filtering data by date
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate BETWEEN '02/13/19 00:00' AND '02/18/19 00:00'
ORDER BY orderdate;

SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35';

SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate LIKE '02/18/19%';
/*We are telling SQL to only select rows where orderdate starts with 02/18/19, but then anything can come after that, that's what the percentage sign
after the date is for*/
--Therefore, in this query we are telling SQL to select the total quantity of items ordered on 02/18/19

--Other example queries using LIKE
SELECT DISTINCT Product
FROM BIT_DB.FebSales
WHERE Product LIKE '%Batteries%';
--We are selecting any rows from the Product column with distinct values in the Product column containing the word 'Baterries' in its name

SELECT DISTINCT Product, price
FROM BIT_DB.FebSales 
WHERE price LIKE '%.99';
--We are selecting any rows from the Product and price columns with distinct values in the price column containing the characters '.99' at the END of its name

--List all the products sold in Los Angeles in February
SELECT DISTINCT Product
FROM BIT_DB.FebSales 
WHERE location LIKE '%Los Angeles%'
ORDER BY Product;

--List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales 
WHERE location LIKE '%Los Angeles%'
GROUP BY Product
ORDER BY Product;
--You CANNOT use DISTINCT instead of GROUP BY in this scenario, because you are aggregating data and for that you'll always need to use GROUP BY.
--See for yourself by running the query below.
SELECT DISTINCT Product, SUM(Quantity)
FROM BIT_DB.FebSales 
WHERE location LIKE '%Los Angeles%';

--For a better understanding of DISTINCT, run the query below.
/*You might think that you'll retrieve rows with DISTINCT product names and the first location that matches that product...
instead, you will get rows with duplicate product names because the location is DISTINCT, the city is the same, 
but the entire value/text in location will be different.
Therefore, rows with the same product name but a different location classify as distinct pieces of data*/
--The SELECT DISTINCT clause retrieves distinct values in a specified list (emphasis on list) of columns.
SELECT DISTINCT Product, location
FROM BIT_DB.FebSales 
WHERE location LIKE '%Los Angeles%'
ORDER BY Product;
/*In case you have thought about this already...
You can't use DISTINCT to get the unique values for only one column when selecting multiple columns
like this -> SELECT (DISTINCT Product), location 
or like this -> SELECT DISTINCT(Product), location
as DISTINCT is NOT a function*/

--Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT location, COUNT(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE ('%NY%')
AND length(orderid) = 6 
GROUP BY location
HAVING COUNT(orderID) >= 3;
/*The query above gives us a better understanding of where our top customers
(classified by the amount of orders placed) are located at.*/
/*If a lot of customers or top customers are located in a specific area, then you might consider
taking a deeper look at this data in hopes of finding a trend or correlation. Maybe you discover that there is not a lot
of competition in that area, or you are able to get an insight on the reason for the rise in demand for a specific product
in that area. You might also use this data to increase customer satisfaction, as you would now know which customers are your
top customers for the month of January and you could ship them some sort of thank you gift,
give them access to an exclusive newsletter, coupon code, etc.*/

--How many of each type of headphone were sold in February?
SELECT product, SUM(quantity) AS 'quantity sold in Feb'
FROM BIT_DB.FebSales
WHERE product LIKE ('%headphone%')
AND length(orderid) = 6 
GROUP BY product;

--What was the average amount spent per account in February?
SELECT SUM(f.quantity*f.price)/COUNT(DISTINCT c.acctnum) AS 'Average amount spent per account in February'
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE length(orderid) = 6;
--returns 206.1692399466157
/*Using DISTINCT is very important as some customers/acctnums maybe have placed multiple orders.
SQL will match/JOIN by order id's, and there might be rows that contains the same account num but different orderID.
To see the importance of using DISTINCT run the query below and compare the result to the query above*/
SELECT SUM(f.quantity*f.price)/COUNT(c.acctnum)
FROM BIT_DB.FebSales f
INNER JOIN BIT_DB.customers c
ON f.orderid=c.order_id
WHERE length(orderid) = 6;
--retuns 190.00034676304287
--For a full breakdown run the queries below 
SELECT count(DISTINCT c.acctnum), SUM(f.quantity*f.price)
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE length(orderid) = 6;
--returns 11986 for acctnum
--and 2471144.5100001357 for SUM(f.quantity*f.price)
--to get the average simply divide the SUM by the COUNT
SELECT 2471144.5100001357/11986;
--returns 206.1692399466157
/*If you delete the DISTINCT, you'll get a different number for acctnum but the same for the SUM,
this is because we JOINed our tables by orderID, therefore the quantity and price columns will have values for all matching order ids's
even if they have the same acctnum*/
/*If you run the query below, you'll see that the total rows loaded equals 11986, this being the same number as the number of
DISTINCT acctnum in our query above*/
SELECT c.acctnum, f.orderID
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE length(orderid) = 6
GROUP BY acctnum;

--What was the average quantity of products purchased per account in February?
SELECT SUM(f.quantity)/COUNT(DISTINCT c.acctnum) AS 'Average quantity of products purchased per account in February'
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE length(orderid) = 6;

--Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales 
WHERE length(orderid) = 6
GROUP BY product
ORDER BY sum(quantity*price) DESC 
LIMIT 1;
--Again, with the query above we are assuming that only one product brought in the most revenue
/*In SQLiteStudio, you cannot aggregate values twice in a single query, therefore, I can't run an query like the following
SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales 
WHERE length(orderid) = 6
GROUP BY product
HAVING SUM(quantity*price) = MAX(SUM(quantity*price));
Fortunately, this can be solved with a subquery.*/
SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY product
HAVING SUM(quantity*price) = (SELECT maxrevenue FROM (
SELECT SUM(quantity*price) AS maxrevenue
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY product
ORDER BY sum(quantity*price) DESC 
LIMIT 1));
--Or simply
SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY product
HAVING SUM(quantity*price) = (
SELECT SUM(quantity*price)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY product
ORDER BY sum(quantity*price) DESC 
LIMIT 1);
--Or (my favorite)
SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY product
HAVING SUM(quantity*price) >= (SELECT MAX(revenue) FROM (
SELECT SUM(quantity*price) AS revenue
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
GROUP BY product));
/*Unfortunately the queries above as precise as they are, are too long, making them widely inefficient to write.
What I would do instead, is simply run the first query but change the LIMIT to 2, if the products returned have
the same SUM, then I would change the LIMIT to 3 and so on until I get a product with a different SUM, 
meaning that there are no more products that brought in the same SUM/max revenue*/
/*You could also change the LIMIT to a relatively high number (depending on your number of products) from the start, like 5,
 to minimize the chances of you having to change the LIMIT again in case the products returned all have the same revenue*/

